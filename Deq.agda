{-# OPTIONS --cubical #-}
module Deq where
open import Cubical.Data.Prod
open import Cubical.Data.List
  renaming
    ( _++_ to _++L_ ; [] to []L ; [_] to [_]L
    ; rev to revL
    ; ++-unit-r to ++L-unit-r
    ; ++-assoc to ++L-assoc
    )
open import Cubical.Foundations.Prelude
open import Cubical.Core.Everything
open import Cubical.Foundations.Prelude
open import Cubical.Foundations.HLevels
open import Cubical.HITs.SetQuotients
  renaming ( [_] to ‚ü¶_‚üß)
open import Cubical.Structures.Monoid

module _ where
  private
    variable
      ùìÅ : Level
      A : Type ùìÅ
      R : A ‚Üí A ‚Üí Type ùìÅ

  recQ : {B : Type ùìÅ}
        (Bset : isSet B)
        (f : A ‚Üí B)
        (feq : (a b : A) (r : R a b) ‚Üí f a ‚â° f b)
      ‚Üí A / R ‚Üí B
  recQ Bset f feq ‚ü¶ a ‚üß = f a
  recQ Bset f feq (eq/ a b r i) = feq a b r i
  recQ Bset f feq (squash/ x y p q i j) = Bset (g x) (g y) (cong g p) (cong g q) i j
    where
    g = recQ Bset f feq

  rec2 : {B : Type ùìÅ} (Bset : isSet B)
       (f : A ‚Üí A ‚Üí B) (feql : (a b c : A) (r : R a b) ‚Üí f a c ‚â° f b c)
                       (feqr : (a b c : A) (r : R b c) ‚Üí f a b ‚â° f a c)
    ‚Üí A / R ‚Üí A / R ‚Üí B
  rec2 Bset f feql feqr = recQ (isSetŒ† (Œª _ ‚Üí Bset))
                            (Œª a ‚Üí recQ Bset (f a) (feqr a))
                            (Œª a b r ‚Üí funExt (elimProp (Œª _ ‚Üí Bset _ _)
                                              (Œª c ‚Üí feql a b c r)))

private
  variable
    ùìÅ : Level
    A : Set ùìÅ

data rotate-right (A : Type ùìÅ) : (List A √ó List A) ‚Üí (List A √ó List A) ‚Üí Type ùìÅ where
  rot-right : (a : A) ‚Üí (lh rh : List A) ‚Üí rotate-right A (lh ‚à∑ ≥ a , rh) (lh , rh ‚à∑ ≥ a)

Queue : Type ùìÅ ‚Üí Type ùìÅ
Queue A = (List A √ó List A) / rotate-right A

mkQ : List A ‚Üí List A ‚Üí Queue A
mkQ l r = ‚ü¶ l , r ‚üß

[] : Queue A
[] = mkQ []L []L

Queue-is-Set : isSet (Queue A)
Queue-is-Set l r = squash/ l r

_‚óÅ_ : A ‚Üí Queue A ‚Üí Queue A
_‚óÅ_ x = recQ Queue-is-Set (Œª { (lh , rh) ‚Üí mkQ (x ‚à∑ lh) rh }) 
  Œª{ .((lh ‚à∑ ≥ a) , rh) .(lh , (rh ‚à∑ ≥ a)) (rot-right a lh rh) ‚Üí
      mkQ (x ‚à∑ (lh ‚à∑ ≥ a)) rh
    ‚â°‚ü® eq/ _ _ (rot-right a (x ‚à∑ lh) rh)  ‚ü©
      mkQ (x ‚à∑ lh) (rh ‚à∑ ≥ a)
    ‚àé
    }

_‚ñ∑_ : Queue A ‚Üí A ‚Üí Queue A
xs ‚ñ∑ x = recQ Queue-is-Set (Œª{ (lh , rh) ‚Üí mkQ lh (x ‚à∑ rh) }) 
      (Œª { .((lh ‚à∑ ≥ a) , rh) .(lh , (rh ‚à∑ ≥ a)) (rot-right a lh rh) ‚Üí 
            mkQ (lh ‚à∑ ≥ a) (x ‚à∑ rh)
          ‚â°‚ü® eq/ _ _ (rot-right a lh (x ‚à∑ rh)) ‚ü©
            mkQ lh (x ‚à∑ (rh ‚à∑ ≥ a))
          ‚àé
          }
      )
      xs

_++_ : Queue A ‚Üí Queue A ‚Üí Queue A 
_++_ = rec2 Queue-is-Set 
    (Œª { (lh , mh) (mh‚Ä≤ , rh) ‚Üí mkQ (lh ++L revL mh) (rh ++L revL mh‚Ä≤) } )
    (Œª { (.(ls ‚à∑ ≥ a) , mls) (ls , .(mls ‚à∑ ≥ a)) (mrs‚Ä≤ , rs) (rot-right a .ls .mls) ‚Üí
          cong (Œª l ‚Üí mkQ l (rs ++L revL mrs‚Ä≤))
          (   (ls ‚à∑ ≥ a) ++L revL mls
            ‚â°‚ü® refl ‚ü©
              (ls ++L [ a ]L) ++L revL mls
            ‚â°‚ü® ++L-assoc ls ([ a ]L) (revL mls) ‚ü©
              ls ++L ([ a ]L ++L revL mls)
            ‚â°‚ü® refl ‚ü©
              ls ++L (a ‚à∑ revL mls)
            ‚â°‚ü® cong (ls ++L_) (sym (rev-++ mls [ a ]L)) ‚ü©
              ls ++L revL (mls ‚à∑ ≥ a)
            ‚àé
          )
      }
    )
    (Œª { (ls , mls) (.(mrs ‚à∑ ≥ a) , rs) (mrs , .(rs ‚à∑ ≥ a)) (rot-right a .mrs .rs) ‚Üí
          cong (mkQ (ls ++L revL mls))
          (   rs ++L revL (mrs ‚à∑ ≥ a) 
            ‚â°‚ü® cong (rs ++L_) (rev-++ mrs [ a ]L) ‚ü©
              rs ++L (a ‚à∑ revL mrs) 
            ‚â°‚ü® sym (++L-assoc rs (a ‚à∑ []L) (revL mrs)) ‚ü© 
              (rs ‚à∑ ≥ a) ++L revL mrs
            ‚àé
          )
      }
    )

infixr 5 _++_ _‚óÅ_
infixl 5 _‚ñ∑_

++-rot-rev-r : ‚àÄ {xs ys zs : List A} ‚Üí mkQ zs (ys ++L revL xs) ‚â° mkQ (zs ++L xs) ys
++-rot-rev-r {xs = []L} {ys} {zs} = cong‚ÇÇ mkQ (sym (++L-unit-r zs)) (++L-unit-r ys)
++-rot-rev-r {xs = x ‚à∑ xs} {ys} {zs} =
    mkQ zs (ys ++L revL (x ‚à∑ xs))
  ‚â°‚ü® cong (Œª ws ‚Üí mkQ zs (ys ++L ws)) (rev-++ (x ‚à∑ []L) xs) ‚ü©
    mkQ zs (ys ++L (revL xs ++L [ x ]L))
  ‚â°‚ü® cong (mkQ zs) (sym (++L-assoc ys (revL xs) [ x ]L)) ‚ü©
    mkQ zs ((ys ++L revL xs) ‚à∑ ≥ x )
  ‚â°‚ü® sym (eq/ _ _ (rot-right x zs (ys ++L revL xs))) ‚ü©
    mkQ (zs ‚à∑ ≥ x) (ys ++L revL xs)
  ‚â°‚ü® ++-rot-rev-r ‚ü©
    mkQ ((zs ‚à∑ ≥ x) ++L xs) ys
  ‚â°‚ü® cong (Œª ws ‚Üí mkQ ws ys) (++L-assoc zs (x ‚à∑ []L) xs) ‚ü©
    mkQ (zs ++L x ‚à∑ xs) ys
  ‚àé

++-rot-rev-l : ‚àÄ {xs ys zs : List A} ‚Üí mkQ (xs ++L revL ys) zs ‚â° mkQ xs (zs ++L ys)
++-rot-rev-l {xs = xs} {[]L} {zs} = cong‚ÇÇ mkQ (++L-unit-r xs) (sym (++L-unit-r zs))
++-rot-rev-l {xs = xs} {x ‚à∑ ys} {zs} = 
    mkQ (xs ++L revL (x ‚à∑ ys)) zs
  ‚â°‚ü® cong (Œª ws ‚Üí mkQ (xs ++L ws) zs) (rev-++ (x ‚à∑ []L) ys) ‚ü©
    mkQ (xs ++L (revL ys ‚à∑ ≥ x)) zs
  ‚â°‚ü® cong (Œª ws ‚Üí mkQ ws zs) (sym (++L-assoc xs (revL ys) (x ‚à∑ []L))) ‚ü©
    mkQ ((xs ++L revL ys) ‚à∑ ≥ x) zs
  ‚â°‚ü® eq/ _ _ (rot-right x (xs ++L revL ys) zs) ‚ü©
    mkQ (xs ++L revL ys) (zs ‚à∑ ≥ x)
  ‚â°‚ü® ++-rot-rev-l ‚ü©
    mkQ xs ((zs ‚à∑ ≥ x) ++L ys)
  ‚â°‚ü® cong (mkQ xs) (++L-assoc zs (x ‚à∑ []L) ys) ‚ü©
    mkQ xs (zs ++L x ‚à∑ ys)
  ‚àé

++-unit-l : ‚àÄ (x : Queue A) ‚Üí [] ++ x ‚â° x
++-unit-l = elimProp (Œª x ‚Üí  Queue-is-Set ([] ++ x) x) Œª { 
    (lh , rh) ‚Üí 
        [] ++ mkQ lh rh
      ‚â°‚ü® refl ‚ü©
        mkQ []L (rh ++L revL lh)
      ‚â°‚ü® ++-rot-rev-r ‚ü© 
        mkQ lh rh
      ‚àé
  }

++-unit-r : ‚àÄ (x : Queue A) ‚Üí x ++ [] ‚â° x
++-unit-r = elimProp (Œª x ‚Üí  Queue-is-Set (x ++ []) x) Œª { 
    (lh , rh) ‚Üí 
        mkQ lh rh ++ []
      ‚â°‚ü® refl ‚ü©
        mkQ (lh ++L revL rh) []L
      ‚â°‚ü® ++-rot-rev-l ‚ü© 
        mkQ lh rh
      ‚àé
  }

++-assoc-aux : (ls‚ÇÅ rs‚ÇÅ ls‚ÇÇ rs‚ÇÇ ls‚ÇÉ rs‚ÇÉ : List A) ‚Üí 
  mkQ ls‚ÇÅ rs‚ÇÅ ++ mkQ ls‚ÇÇ rs‚ÇÇ ++ mkQ ls‚ÇÉ rs‚ÇÉ ‚â°
    (mkQ ls‚ÇÅ rs‚ÇÅ ++ mkQ ls‚ÇÇ rs‚ÇÇ) ++ mkQ ls‚ÇÉ rs‚ÇÉ
++-assoc-aux ls‚ÇÅ rs‚ÇÅ ls‚ÇÇ rs‚ÇÇ ls‚ÇÉ rs‚ÇÉ =
    mkQ ls‚ÇÅ rs‚ÇÅ ++ (mkQ ls‚ÇÇ rs‚ÇÇ ++ mkQ ls‚ÇÉ rs‚ÇÉ)
  ‚â°‚ü® refl ‚ü©
    mkQ ls‚ÇÅ rs‚ÇÅ ++ (mkQ (ls‚ÇÇ ++L revL rs‚ÇÇ) (rs‚ÇÉ ++L revL ls‚ÇÉ))
  ‚â°‚ü® refl ‚ü©
    mkQ (ls‚ÇÅ ++L revL rs‚ÇÅ) ((rs‚ÇÉ ++L revL ls‚ÇÉ) ++L revL (ls‚ÇÇ ++L revL rs‚ÇÇ) )
  ‚â°‚ü® ++-rot-rev-r ‚ü©
    mkQ ((ls‚ÇÅ ++L revL rs‚ÇÅ) ++L (ls‚ÇÇ ++L revL rs‚ÇÇ)) (rs‚ÇÉ ++L revL ls‚ÇÉ)
  ‚â°‚ü® cong (Œª ws ‚Üí mkQ ((ls‚ÇÅ ++L revL rs‚ÇÅ) ++L ws) _) 
    (   ls‚ÇÇ ++L revL rs‚ÇÇ
      ‚â°‚ü® cong (_++L revL rs‚ÇÇ) (sym (rev-rev ls‚ÇÇ)) ‚ü©
        revL (revL ls‚ÇÇ) ++L revL rs‚ÇÇ
      ‚â°‚ü® sym (rev-++ rs‚ÇÇ (revL ls‚ÇÇ)) ‚ü©
        revL (rs‚ÇÇ ++L revL ls‚ÇÇ) ‚àé
    )
  ‚ü©
    mkQ ((ls‚ÇÅ ++L revL rs‚ÇÅ) ++L revL (rs‚ÇÇ ++L revL ls‚ÇÇ)) (rs‚ÇÉ ++L revL ls‚ÇÉ)
  ‚â°‚ü® refl ‚ü©
    (mkQ (ls‚ÇÅ ++L revL rs‚ÇÅ) (rs‚ÇÇ ++L revL ls‚ÇÇ)) ++ mkQ ls‚ÇÉ rs‚ÇÉ
  ‚â°‚ü® refl ‚ü©
    (mkQ ls‚ÇÅ rs‚ÇÅ ++ mkQ ls‚ÇÇ rs‚ÇÇ) ++ mkQ ls‚ÇÉ rs‚ÇÉ
  ‚àé

++-assoc : (xs ys zs : Queue A) ‚Üí xs ++ (ys ++ zs) ‚â° (xs ++ ys) ++ zs
++-assoc = elimProp (Œª _ ‚Üí isPropŒ† (Œª _ ‚Üí isPropŒ† (Œª _ ‚Üí Queue-is-Set _ _))) 
  Œª { (ls‚ÇÅ , rs‚ÇÅ) ‚Üí  
    elimProp (Œª _ ‚Üí isPropŒ† Œª _ ‚Üí Queue-is-Set _ _) 
      Œª {(ls‚ÇÇ , rs‚ÇÇ) ‚Üí elimProp (Œª _ ‚Üí Queue-is-Set _ _) 
          (Œª { (ls‚ÇÉ , rs‚ÇÉ) ‚Üí ++-assoc-aux ls‚ÇÅ rs‚ÇÅ ls‚ÇÇ rs‚ÇÇ ls‚ÇÉ rs‚ÇÉ }) }
  }

Queue-monoid-str : monoid-structure (Queue A)
Queue-monoid-str = ([] , _++_) , (Queue-is-Set , (++-assoc , (++-unit-r , ++-unit-l)))
