{-# OPTIONS --cubical --safe #-}
module Deq where
import Level renaming (suc to sucL)
open import Cubical.Core.Everything
open import Cubical.Core.Id using (pathId)
import Cubical.Core.Id as Id
open import Cubical.Core.HoTT-UF using (transport)
open import Data.List
      using   (List)
import Data.List as L
import Data.List.Properties as L
import Agda.Builtin.Equality as BE
import Relation.Binary.PropositionalEquality as BE
open import Function
open import Algebra.FunctionProperties

data Deq {ùìÅ} (A : Set ùìÅ) : Set ùìÅ where
  mkQ    : List A ‚Üí List A ‚Üí Deq A

  rotate : (a : A) (l r : List A) ‚Üí mkQ (l L.‚à∑ ≥ a) r ‚â° mkQ l (r L.‚à∑ ≥ a)
pattern [] = mkQ L.[] L.[]

infixr 2 _‚â°‚ü®‚ü©_
_‚â°‚ü®‚ü©_ : ‚àÄ{ùìÅ} {A : Set ùìÅ} (x : A) {y : A} ‚Üí x ‚â° y ‚Üí x ‚â° y
_ ‚â°‚ü®‚ü© e = e

module _ {ùìÅ} {A : Set ùìÅ} where
  infixr 5 _‚à∑_
  _‚à∑_ : A ‚Üí Deq A ‚Üí Deq A
  x ‚à∑ mkQ l r = mkQ (x L.‚à∑ l) r
  x ‚à∑ rotate a l r i = rotate a (x L.‚à∑ l) r i

  infixl 5 _‚à∑ ≥_
  _‚à∑ ≥_ : Deq A ‚Üí A ‚Üí Deq A
  mkQ l r        ‚à∑ ≥ x = mkQ l (x L.‚à∑ r)
  rotate a l r i ‚à∑ ≥ x = rotate a l (x L.‚à∑ r) i

  reverse : Deq A ‚Üí Deq A
  reverse (mkQ l r) = mkQ r l
  reverse (rotate a l r i) = rotate a r l (~ i)

  toId : ‚àÄ{‚Ñì‚Ä≤} {B : Set ‚Ñì‚Ä≤} {a b : B} ‚Üí a BE.‚â° b ‚Üí a Id.‚â° b
  toId BE.refl = Id.refl

  toPath : ‚àÄ{‚Ñì‚Ä≤} {B : Set ‚Ñì‚Ä≤} {a b : B} ‚Üí a BE.‚â° b ‚Üí a ‚â° b
  toPath BE.refl = refl

  map : ‚àÄ {ùìÅ‚Ä≤} {B : Set ùìÅ‚Ä≤} ‚Üí (A ‚Üí B) ‚Üí Deq A ‚Üí Deq B
  map f (mkQ l r) = mkQ (L.map f l) (L.map f r)
  map  {_} {B} f (rotate a l r i) = 
    let pf =  mkQ (L.map f (l L.‚à∑ ≥ a)) (L.map f r)
            ‚â°‚ü® cong
                (Œª xs ‚Üí mkQ xs $ L.map f r) $
                toPath $ L.map-++-commute f l L.[ a ]
             ‚ü© 
              mkQ (L.map f l L.‚à∑ ≥ f a) (L.map f r)
            ‚â°‚ü® rotate (f a) (L.map f l) (L.map f r) ‚ü©
              mkQ (L.map f l) (L.map f r  L.‚à∑ ≥ f a)
            ‚â°‚ü® cong
                (Œª ys ‚Üí mkQ (L.map f l) ys) $
                sym $ toPath $ L.map-++-commute f r L.[ a ]
              ‚ü©
              mkQ (L.map f l) (L.map f (r L.‚à∑ ≥ a))
            ‚àé
    in pf i

  module _ where
    aux-app-rev : ‚àÄ (a : A) (l r : List A)
                ‚Üí l L.++ L.reverse (r L.‚à∑ ≥ a) ‚â° (l L.‚à∑ ≥ a) L.++ L.reverse r
    aux-app-rev a l r = 
        l L.++ L.reverse (r L.‚à∑ ≥ a)
      ‚â°‚ü® cong (l L.++_) $ toPath $ L.reverse-++-commute r _ ‚ü©
        l L.++ (L.[ a ] L.++ L.reverse r)
      ‚â°‚ü® sym $ toPath $ L.++-assoc l _ _ ‚ü©
        (l L.‚à∑ ≥ a) L.++ L.reverse r
      ‚àé

    aux-que-app-rev : ‚àÄ (l m r : List A) ‚Üí mkQ (l L.++ m) r ‚â° mkQ l (r L.++ L.reverse m)
    aux-que-app-rev l L.[] r =
        mkQ (l L.++ L.[]) r
      ‚â°‚ü® cong (Œª x ‚Üí mkQ x r) (toPath $ L.++-identity ≥ l) ‚ü©
        mkQ l r
      ‚â°‚ü® cong (mkQ l) (sym $ toPath $ L.++-identity ≥ r) ‚ü©
        mkQ l (r L.++ L.[])
      ‚â°‚ü®‚ü©
        mkQ l (r L.++ L.reverse L.[])
      ‚àé
    aux-que-app-rev l (x L.‚à∑ xs) r =
        mkQ (l L.++ (x L.‚à∑ xs)) r
      ‚â°‚ü®‚ü©
        mkQ (l L.++ (L.[ x ] L.++ xs)) r
      ‚â°‚ü® cong (Œª l ‚Üí mkQ l r) $ sym $ toPath $
          L.++-assoc l L.[ x ] xs
       ‚ü©
        mkQ ((l L.‚à∑ ≥ x) L.++ xs) r
      ‚â°‚ü® aux-que-app-rev (l L.‚à∑ ≥ x) xs r ‚ü©
        mkQ (l L.‚à∑ ≥ x) (r L.++ L.reverse xs)
      ‚â°‚ü® rotate x l (r L.++ L.reverse xs) ‚ü©
        mkQ l ((r L.++ L.reverse xs) L.‚à∑ ≥ x)
      ‚â°‚ü® cong (mkQ l) $ toPath $
          L.++-assoc r (L.reverse xs) L.[ x ]
       ‚ü©
        mkQ l (r L.++ (L.reverse xs L.‚à∑ ≥ x))
      ‚â°‚ü® cong (Œª zs ‚Üí mkQ l (r L.++ zs)) $ sym $ toPath $
          L.unfold-reverse x xs
       ‚ü©
        mkQ l (r L.++ L.reverse (x L.‚à∑ xs))
      ‚àé

  infixr 5 _++_
  _++_ : Deq A ‚Üí Deq A ‚Üí Deq A
  mkQ l‚ÇÄ r‚ÇÄ        ++ mkQ l‚ÇÅ r‚ÇÅ      = mkQ (l‚ÇÄ L.++ L.reverse r‚ÇÄ) (r‚ÇÅ L.++ L.reverse l‚ÇÅ)
  mkQ l‚ÇÄ r‚ÇÄ        ++ rotate a l‚ÇÅ r‚ÇÅ i =
    mkQ (l‚ÇÄ L.++ L.reverse r‚ÇÄ) (aux-app-rev a r‚ÇÅ l‚ÇÅ i)
  rotate a l‚ÇÄ r‚ÇÄ i ++ mkQ l‚ÇÅ r‚ÇÅ =
    mkQ (aux-app-rev a  l‚ÇÄ r‚ÇÄ (~ i)) (r‚ÇÅ L.++ L.reverse l‚ÇÅ)
  rotate a‚ÇÄ l‚ÇÄ r‚ÇÄ i ++ rotate a‚ÇÅ l‚ÇÅ r‚ÇÅ j =
    mkQ (aux-app-rev a‚ÇÄ l‚ÇÄ r‚ÇÄ (~ i)) (aux-app-rev a‚ÇÅ r‚ÇÅ l‚ÇÅ j)

  module Properties where
    ++-identity ≥ : RightIdentity {A = Deq A} _‚â°_ [] _++_
    ++-identity ≥ (mkQ l r) =
        mkQ l r ++ []
      ‚â°‚ü®‚ü©
        mkQ (l L.++ L.reverse r) (L.[] L.++ L.reverse L.[])
      ‚â°‚ü®‚ü©
        mkQ (l L.++ L.reverse r) L.[]
      ‚â°‚ü® aux-que-app-rev l (L.reverse r) L.[] ‚ü©
        mkQ l (L.[] L.++ L.reverse (L.reverse r))
      ‚â°‚ü®‚ü©
        mkQ l (L.reverse (L.reverse r))
      ‚â°‚ü® cong (mkQ l) $ toPath $ L.reverse-involutive r ‚ü©
        mkQ l r
      ‚àé
    ++-identity ≥ (rotate a l r i) = ?
    
    ++-identityÀ° : LeftIdentity {A = Deq A} _‚â°_ [] _++_
    ++-identityÀ° (mkQ l r) =
        [] ++ mkQ l r
      ‚â°‚ü®‚ü©
        mkQ L.[] (r L.++ L.reverse l)
      ‚â°‚ü® sym $ aux-que-app-rev L.[] l r ‚ü©
        mkQ l r
      ‚àé

    ++-assoc : Associative {A = Deq A} _‚â°_ _++_
    ++-assoc (mkQ l‚ÇÅ r‚ÇÅ) (mkQ l‚ÇÇ r‚ÇÇ) (mkQ l‚ÇÉ r‚ÇÉ) = 
        (mkQ l‚ÇÅ r‚ÇÅ ++ mkQ l‚ÇÇ r‚ÇÇ) ++ mkQ l‚ÇÉ r‚ÇÉ
      ‚â°‚ü®‚ü©
        mkQ (l‚ÇÅ L.++ L.reverse r‚ÇÅ) (r‚ÇÇ L.++ L.reverse l‚ÇÇ) ++ mkQ l‚ÇÉ r‚ÇÉ
      ‚â°‚ü®‚ü©
        mkQ ((l‚ÇÅ L.++ L.reverse r‚ÇÅ) L.++ L.reverse (r‚ÇÇ L.++ L.reverse l‚ÇÇ)) (r‚ÇÉ L.++ L.reverse l‚ÇÉ)
      ‚â°‚ü® cong (Œª targ ‚Üí mkQ ((l‚ÇÅ L.++ L.reverse r‚ÇÅ) L.++ targ) (r‚ÇÉ L.++ L.reverse l‚ÇÉ)) $
            L.reverse (r‚ÇÇ L.++ L.reverse l‚ÇÇ)
          ‚â°‚ü® toPath $ L.reverse-++-commute r‚ÇÇ _ ‚ü©
            L.reverse (L.reverse l‚ÇÇ) L.++ L.reverse r‚ÇÇ
          ‚â°‚ü® cong (L._++ L.reverse r‚ÇÇ) $ toPath $
              L.reverse-involutive l‚ÇÇ
           ‚ü©
            l‚ÇÇ L.++ L.reverse r‚ÇÇ
          ‚àé
       ‚ü©
        mkQ ((l‚ÇÅ L.++ L.reverse r‚ÇÅ) L.++ (l‚ÇÇ L.++ L.reverse r‚ÇÇ)) (r‚ÇÉ L.++ L.reverse l‚ÇÉ)
      ‚â°‚ü® aux-que-app-rev (l‚ÇÅ L.++ L.reverse r‚ÇÅ) _ (r‚ÇÉ L.++ L.reverse l‚ÇÉ) ‚ü©
        mkQ (l‚ÇÅ L.++ L.reverse r‚ÇÅ) ((r‚ÇÉ L.++ L.reverse l‚ÇÉ) L.++ L.reverse (l‚ÇÇ L.++ L.reverse r‚ÇÇ))
      ‚â°‚ü®‚ü©
        mkQ l‚ÇÅ r‚ÇÅ ++ mkQ (l‚ÇÇ L.++ L.reverse r‚ÇÇ) (r‚ÇÉ L.++ L.reverse l‚ÇÉ)
      ‚â°‚ü®‚ü©
        mkQ l‚ÇÅ r‚ÇÅ ++ (mkQ l‚ÇÇ r‚ÇÇ ++ mkQ l‚ÇÉ r‚ÇÉ)
      ‚àé
    
     